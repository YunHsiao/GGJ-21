[1,["1brw/JvvpFnIvdrxpFCgMZ","c5PfmsJ8JEKZrdMHiwZ/QB@6c48a","9eDfotV5ZDoLYY9iSEa/c1@6c48a","5aBhTN+vBLX75iutu4qdFk","12Y9dMgWdJKJGmTiZyQR9H@fc873","97zsDzVhVLV7ZbseKFq+Mc@6c48a","2aPq9aAa9E1bghkiwUwKmZ@6c48a","20g1ukYUVPvKWKBRznAKo+@6c48a","2fWJCahYVJh6YNOkbVpRlX@6c48a","f8WjGfKJRGaKHEoj+Gj7r9","12Y9dMgWdJKJGmTiZyQR9H@801ec","34usacRA5PeaPCFRSuFIEc","42JGwriQxMPoiPFLjywVgE","b8grWVyhFNRrYHKz1cql3w","d4i+zSRGJIIIQvLaV867qT@6c48a","84/hxMw6lGVoDCS5pm1E1N@6c48a","fb/2FYMeVMn544dM8V+3eq@6c48a","2cf6rOiyNMQayYjat3wHIX@6c48a","2ckSDQ+WpO3agyyZbMRbMD@6c48a"],["node","texture","_effectAsset","root","data","_mesh","_texture","_textureSource","mainTexture","model","characterController","character","_clip"],[["cc.Node",["_name","_active","_prefab","_parent","_lpos","_components","_lscale","_children","_lrot","_euler"],1,4,1,5,9,5,2,5,5],["cc.Camera",["_name","_visibility","_orthoHeight","_fov","_projection","node","__prefab","_color","_rect"],-2,1,4,5,5],"cc.SpriteFrame",["cc.Node",["_name","_parent","_components","_prefab","_lrot","_lscale","_euler","_lpos"],2,1,2,4,5,5,5,5],["cc.Material",["_states","_defines","_name","_techIdx","_props"],-1,12],["cc.CompactValueTypeArray",["_unitCount","_unitElement","_length","_byteOffset"],-1],["cc.MeshRenderer",["_name","node","__prefab","_materials","lightmapSettings","_mesh"],2,1,4,3,4,6],["cc.PhysicsMaterial",["_friction","_restitution"],1],["cc.Prefab",["_name"],2],["cc.Node",["_name","_children","_components","_prefab","_lpos"],2,2,12,4,5],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["93929O83pBANKoOxC3c/52n",["_transparent","_materials","node","__prefab","lightmapSettings","_texture"],1,1,4,4,6],["cc.CompPrefabInfo",["fileId"],2],["cc.ModelLightmapSettings",[],3],["cc.Mesh",["_native","_dataLength","_hash","_struct"],0,11],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.AnimationClip",["_name","_native","sample","wrapMode","enableTrsBlending","_duration","_hash","_keys","_curves"],-4,9,12],["cc.AnimationClip",["_name","wrapMode","_duration","_hash","_keys","_curves"],-2,12],["cc.animation.HierarchyPath",["path"],2],["cc.BoxCollider",["node","__prefab"],3,1,4],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.AudioClip",["_name","_native","_duration"],0],["cc.RigidBody",["_group","_useGravity","node","__prefab","_linearFactor","_angularFactor"],1,1,4,5,5],["cc.CapsuleCollider",["_radius","_cylinderHeight","node","__prefab","_center"],1,1,4,5],["da08fpgnp9LvIlbyogdpVbD",["node","__prefab","character","characterController","characterASM","planeASM"],3,1,4,1,1,4,4],["SequenceAnimationState",["model","animInfo"],3,1,9],["SequenceAnimationInfo",["texture"],3,6],["276fcld+b5O8qjGJZTPQFke",["_enabled","node","__prefab"],2,1,4],["01573nDNMVMVb35s7Vja1ru",["minY","node","__prefab"],2,1,4],["596fbIiY9ZBDI5y66x8iDSP",["node","__prefab","jumpParam"],3,1,4,4],["Character.JumpParam",["height"],2],["cc.AudioSource",["_loop","node","__prefab","_clip"],2,1,4,6],["2f54f4Nux1Jwb11ViTNgGqn",["rotateFactor","moveEnable","moveFrameInterval","node","__prefab","character","currentOrient","targetOrient"],0,1,4,1,1,1]],[[5,3,0,1,2,5],[18,0,2],[12,0,2],[10,0,1,2,2],[26,0,1],[14,0,1,2,3,4],[13,1],[15,0,1,2,3,4],[8,0,2],[4,3,0,1,4,4],[0,0,3,5,2,4,8,9,2],[11,0,1,2,3,4,5,3],[4,2,0,1,4,4],[25,0,1,1],[6,0,1,2,3,4,2],[7,0,1,3],[0,0,7,2,4,8,6,9,2],[0,0,3,5,2,4,6,2],[0,0,7,2,4,8,9,2],[0,0,3,5,2,6,2],[0,0,5,2,4,6,2],[0,0,3,2,2],[0,0,1,3,5,2,4,8,9,3],[0,0,1,3,7,2,4,3],[0,0,3,7,2,6,2],[0,0,1,3,5,2,6,3],[0,0,3,5,2,2],[9,0,1,2,3,4,2],[3,0,1,2,3,4,5,6,2],[3,0,1,2,3,7,4,5,6,2],[16,0,1,2,3,4,5,6,7,8,8],[17,0,1,2,3,4,5,6],[5,0,1,2,4],[19,0,1,1],[20,0,1,2,4],[21,0,1,2,4],[22,0,1,2,3,4,5,3],[23,0,1,2,3,4,3],[24,0,1,2,3,4,5,1],[27,0,1,2,2],[1,0,3,2,1,5,6,7,5],[1,0,1,5,6,7,8,3],[1,0,4,2,1,5,6,7,5],[28,0,1,2,2],[29,0,1,2,1],[30,0,2],[6,0,1,2,3,4,5,2],[31,0,1,2,3,2],[32,0,1,2,3,4,5,6,7,4]],[[[[15,0,0.1]],0,0,[],[],[]],[[[8,"grassFront"],[16,"grassFront",[-2],[3,"d7nRqUM7xL3ZKU7uiOgbPu",-1,0],[1,0.2,0.034,-0.162],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[17,"Node",1,[[11,true,[null],-3,[2,"81Ts1CkutG3YDsHT6UehL8"],[6],0]],[3,"a2UaKyz+dH+I6kbMLmjjf8",1,0],[1,0.2,0,0],[1,0.8606271777003485,1,1]]],0,[0,3,1,0,-1,2,0,0,2,0,4,1,3],[0],[6],[5]],[[[5,".bin",27432,856793026,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":24192,"length":1872,"count":468,"stride":4}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[1],"indexView":{"offset":27360,"length":72,"count":18,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24192,"count":336,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":26064,"length":1296,"count":18,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6]]},"minPosition",8,[1,-0.012557893991470337,-0.01870827004313469,0.008078820072114468],"maxPosition",8,[1,0.011352612636983395,0.01870827004313469,0.012344586662948132]]]],0,0,[],[],[]],[[[7,"Skin-4",952542505,["Armature.004/Bone","Armature.004/Bone/Bone.001.l","Armature.004/Bone/Bone.001.l/Bone.002.l","Armature.004/Bone/Bone.001.l/Bone.002.l/Bone.003.l","Armature.004/Bone/Bone.001.r","Armature.004/Bone/Bone.001.r/Bone.002.r","Armature.004/Bone/Bone.001.r/Bone.002.r/Bone.003.r"],[[[7,0.02369137667119503,0.999719500541687,2.13213070310303e-7,0,2.865075714453269e-7,2.0648330689709837e-7,-1,0,-0.9997193813323975,0.02369138039648533,-2.815352502238966e-7,0,0.011094330810010433,0.008802029304206371,0.000013396551366895437,1],[7,0.11699223518371582,-0.000541302899364382,-0.9931327700614929,0,0.1138584166765213,0.9934133887290955,0.01287120208144188,0,0.9865846037864685,-0.11458230763673782,0.11628329753875732,0,-0.012250253930687904,-0.0012746206484735012,-0.000061235019529704,1],[7,0.12032333761453629,-0.251542866230011,-0.96033775806427,0,0.04586415737867355,0.9677411317825317,-0.24773575365543365,0,0.9916749000549316,-0.01423668209463358,0.12797868251800537,0,-0.011804875917732716,-0.00672262255102396,0.0017074074130505323,1],[7,0.11491018533706665,-0.40787848830223083,-0.9057762622833252,0,0.051333535462617874,0.913036048412323,-0.40463539958000183,0,0.9920485615730286,3.3748989380910643e-8,0.12585501372814178,0,-0.011883238330483437,-0.012292452156543732,0.0038411731366068125,1],[7,-0.11699215322732925,-0.0005411377060227096,-0.993133008480072,0,0.1138584166765213,-0.9934136867523193,-0.01287135761231184,0,-0.9865846633911133,-0.11458234488964081,0.11628320813179016,0,0.01224720198661089,-0.0012480024015530944,-0.00006087426299927756,1],[7,-0.1203233003616333,-0.25154250860214233,-0.9603378772735596,0,0.04586414620280266,-0.9677414894104004,0.24773535132408142,0,-0.9916747808456421,-0.014236741699278355,0.12797865271568298,0,0.011803647503256798,-0.006696688011288643,0.001700771157629788,1],[7,-0.11491022258996964,-0.4078783094882965,-0.9057765007019043,0,0.051333557814359665,-0.9130365252494812,0.40463510155677795,0,-0.9920487403869629,-2.1671519689903107e-8,0.12585504353046417,0,0.011881867423653603,-0.01226798165589571,0.003830324625596404,1]],8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[7,"Skin-0",3370455005,["Armature/Bone","Armature/Bone/Bone.001.l","Armature/Bone/Bone.001.l/Bone.002.l","Armature/Bone/Bone.001.l/Bone.002.l/Bone.003.l","Armature/Bone/Bone.001.r","Armature/Bone/Bone.001.r/Bone.002.r","Armature/Bone/Bone.001.r/Bone.002.r/Bone.003.r"],[[[7,0.023691372945904732,0.9997193813323975,2.132158556378272e-7,0,2.8650762828874576e-7,2.0648606380291312e-7,-1,0,-0.9997192621231079,0.02369137480854988,-2.815352502238966e-7,0,0.011094330810010433,0.008802016265690327,0.000013401056094153319,1],[7,0.11699222028255463,-0.0005413026665337384,-0.9931326508522034,0,0.11385838687419891,0.9934134483337402,0.012871199287474155,0,0.9865845441818237,-0.11458228528499603,0.11628330498933792,0,-0.012250256724655628,-0.0012746193679049611,-0.00006121758633526042,1],[7,0.12032333016395569,-0.2515428066253662,-0.9603376388549805,0,0.04586417227983475,0.967741072177887,-0.24773570895195007,0,0.9916749000549316,-0.014236699789762497,0.12797866761684418,0,-0.011804879643023014,-0.006722616497427225,0.0017074205679818988,1],[7,0.11491019278764725,-0.4078785479068756,-0.9057762622833252,0,0.051333535462617874,0.913036048412323,-0.4046354293823242,0,0.9920486211776733,3.941820381214711e-8,0.12585501372814178,0,-0.011883242055773735,-0.012292435392737389,0.0038411831483244896,1],[7,-0.11699211597442627,-0.0005411392194218934,-0.9931326508522034,0,0.11385838687419891,-0.9934136271476746,-0.012871350161731243,0,-0.9865845441818237,-0.11458233743906021,0.11628317832946777,0,0.012247205711901188,-0.0012480007717385888,-0.000060871207097079605,1],[7,-0.12032332271337509,-0.25154247879981995,-0.96033775806427,0,0.045864153653383255,-0.9677414298057556,0.24773532152175903,0,-0.9916749000549316,-0.014236739836633205,0.12797865271568298,0,0.011803651228547096,-0.006696685682982206,0.001700781867839396,1],[7,-0.11491022258996964,-0.4078783690929413,-0.9057765603065491,0,0.05133355036377907,-0.9130364656448364,0.40463516116142273,0,-0.9920486807823181,-8.64149818369242e-9,0.12585504353046417,0,0.011881867423653603,-0.01226797141134739,0.003830340225249529,1]],8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[5,".bin",27432,856793026,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":24192,"length":1872,"count":468,"stride":4}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[1],"indexView":{"offset":27360,"length":72,"count":18,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24192,"count":336,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":26064,"length":1296,"count":18,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6]]},"minPosition",8,[1,-0.012557893991470337,-0.01870827004313469,0.008078820072114468],"maxPosition",8,[1,0.011352612636983395,0.01870827004313469,0.012344586662948132]]]],0,0,[],[],[]],[[[5,".bin",27432,856793026,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":24192,"length":1872,"count":468,"stride":4}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[1],"indexView":{"offset":27360,"length":72,"count":18,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24192,"count":336,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":26064,"length":1296,"count":18,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6]]},"minPosition",8,[1,-0.012557893991470337,-0.01870827004313469,0.008078820072114468],"maxPosition",8,[1,0.011352612636983395,0.01870827004313469,0.012344586662948132]]]],0,0,[],[],[]],[[[7,"Skin-2",3370455005,["Armature.002/Bone","Armature.002/Bone/Bone.001.l","Armature.002/Bone/Bone.001.l/Bone.002.l","Armature.002/Bone/Bone.001.l/Bone.002.l/Bone.003.l","Armature.002/Bone/Bone.001.r","Armature.002/Bone/Bone.001.r/Bone.002.r","Armature.002/Bone/Bone.001.r/Bone.002.r/Bone.003.r"],[[[7,0.023691372945904732,0.9997193813323975,2.132158556378272e-7,0,2.8650762828874576e-7,2.0648606380291312e-7,-1,0,-0.9997192621231079,0.02369137480854988,-2.815352502238966e-7,0,0.011094330810010433,0.008802012540400028,0.000013401099749899004,1],[7,0.11699222028255463,-0.0005413026665337384,-0.9931326508522034,0,0.11385838687419891,0.9934134483337402,0.012871199287474155,0,0.9865845441818237,-0.11458228528499603,0.11628330498933792,0,-0.012250256724655628,-0.0012746143620461226,-0.00006122272316133603,1],[7,0.12032333016395569,-0.2515428066253662,-0.9603376388549805,0,0.04586417227983475,0.967741072177887,-0.24773570895195007,0,0.9916749000549316,-0.014236699789762497,0.12797866761684418,0,-0.011804879643023014,-0.006722613237798214,0.0017074242932721972,1],[7,0.11491019278764725,-0.4078785479068756,-0.9057762622833252,0,0.051333535462617874,0.913036048412323,-0.4046354293823242,0,0.9920486211776733,3.941820381214711e-8,0.12585501372814178,0,-0.011883242055773735,-0.012292435392737389,0.0038411864079535007,1],[7,-0.11699211597442627,-0.0005411392194218934,-0.9931326508522034,0,0.11385838687419891,-0.9934136271476746,-0.012871350161731243,0,-0.9865845441818237,-0.11458233743906021,0.11628317832946777,0,0.012247205711901188,-0.0012480005389079452,-0.00006087146539357491,1],[7,-0.12032332271337509,-0.25154247879981995,-0.96033775806427,0,0.045864153653383255,-0.9677414298057556,0.24773532152175903,0,-0.9916749000549316,-0.014236739836633205,0.12797865271568298,0,0.011803651228547096,-0.006696685217320919,0.001700783846899867,1],[7,-0.11491022258996964,-0.4078783690929413,-0.9057765603065491,0,0.05133355036377907,-0.9130364656448364,0.40463516116142273,0,-0.9920486807823181,-8.64149818369242e-9,0.12585504353046417,0,0.011881869286298752,-0.012267976999282837,0.0038303423207253218,1]],8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[5,".bin",27432,856793026,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":24192,"length":1872,"count":468,"stride":4}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[1],"indexView":{"offset":27360,"length":72,"count":18,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24192,"count":336,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":26064,"length":1296,"count":18,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6]]},"minPosition",8,[1,-0.012557893991470337,-0.01870827004313469,0.008078820072114468],"maxPosition",8,[1,0.011352612636983395,0.01870827004313469,0.012344586662948132]]]],0,0,[],[],[]],[[[12,"Material.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645},"albedoScale",8,[1,0.8000000715255737,0.7707082629203796,0.10224683582782745]]],11]]],0,0,[0],[2],[0]],[[[7,"Skin-3",3370455005,["Armature.003/Bone","Armature.003/Bone/Bone.001.l","Armature.003/Bone/Bone.001.l/Bone.002.l","Armature.003/Bone/Bone.001.l/Bone.002.l/Bone.003.l","Armature.003/Bone/Bone.001.r","Armature.003/Bone/Bone.001.r/Bone.002.r","Armature.003/Bone/Bone.001.r/Bone.002.r/Bone.003.r"],[[[7,0.023691372945904732,0.9997193813323975,2.132158556378272e-7,0,2.8650762828874576e-7,2.0648606380291312e-7,-1,0,-0.9997192621231079,0.02369137480854988,-2.815352502238966e-7,0,0.011094331741333008,0.0088020209223032,0.000013397479051491246,1],[7,0.11699222028255463,-0.0005413026665337384,-0.9931326508522034,0,0.11385838687419891,0.9934134483337402,0.012871199287474155,0,0.9865845441818237,-0.11458228528499603,0.11628330498933792,0,-0.012250256724655628,-0.001274618087336421,-0.0000612080839346163,1],[7,0.12032333016395569,-0.2515428066253662,-0.9603376388549805,0,0.04586417227983475,0.967741072177887,-0.24773570895195007,0,0.9916749000549316,-0.014236699789762497,0.12797866761684418,0,-0.011804880574345589,-0.006722610909491777,0.0017074112547561526,1],[7,0.11491019278764725,-0.4078785479068756,-0.9057762622833252,0,0.051333535462617874,0.913036048412323,-0.4046354293823242,0,0.9920486211776733,3.941820381214711e-8,0.12585501372814178,0,-0.01188324298709631,-0.012292435392737389,0.0038411756977438927,1],[7,-0.11699211597442627,-0.0005411392194218934,-0.9931326508522034,0,0.11385838687419891,-0.9934136271476746,-0.012871350161731243,0,-0.9865845441818237,-0.11458233743906021,0.11628317832946777,0,0.012247207574546337,-0.001247999258339405,-0.00006086457506171428,1],[7,-0.12032332271337509,-0.25154247879981995,-0.96033775806427,0,0.045864153653383255,-0.9677414298057556,0.24773532152175903,0,-0.9916749000549316,-0.014236739836633205,0.12797865271568298,0,0.011803652159869671,-0.006696691736578941,0.0017007661517709494,1],[7,-0.11491022258996964,-0.4078783690929413,-0.9057765603065491,0,0.05133355036377907,-0.9130364656448364,0.40463516116142273,0,-0.9920486807823181,-8.64149818369242e-9,0.12585504353046417,0,0.011881867423653603,-0.012267977930605412,0.0038303332403302193,1]],8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[12,"Material",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645},"albedoScale",8,[1,0,0,0]]],11]]],0,0,[0],[2],[0]],[[[30,"Scene",".bin",30,2,true,0.625,4113514116,[[0,23160,16,6,16],[0,23224,16,6,16],[0,23288,16,6,16],[0,23352,16,6,16],[0,23416,16,6,16],[0,23480,16,6,16],[0,23544,16,6,16],[0,23608,16,6,16],[0,23672,16,6,16],[0,23736,16,6,16],[0,23800,16,6,16],[0,23864,16,6,16],[0,23928,16,6,16],[0,23992,16,6,16],[0,24056,16,6,16],[0,24120,16,6,16],[0,24184,16,6,16],[0,24248,16,6,16],[0,24312,16,6,16],[0,24376,16,6,16],[0,24440,16,6,16],[0,24504,15,6,15],[0,24564,16,6,16],[0,24628,16,6,16],[0,24692,16,6,16],[0,24756,16,6,16],[0,24820,16,6,16],[0,24884,16,6,16],[0,24948,16,6,16],[0,25012,16,6,16],[0,25076,16,6,16],[0,25140,16,6,16],[0,25204,16,6,16],[0,25268,16,6,16],[0,25332,16,6,16]],[[[{},"modifiers",12,[[-1,"position"],1,0],"data",11,[{"keys":0},"values",4,[32,48,22,16]]],[{},"modifiers",12,[[-2,"rotation"],1,0],"data",11,[{"keys":0},"values",4,[0,192,64,38,16]]],[{},"modifiers",12,[[-3,"scale"],1,0],"data",11,[{"keys":0},"values",4,[0,448,48,22,16]]],[{},"modifiers",12,[[-4,"position"],1,0],"data",11,[{"keys":1},"values",4,[0,640,48,22,16]]],[{},"modifiers",12,[[-5,"rotation"],1,0],"data",11,[{"keys":1},"values",4,[0,832,64,38,16]]],[{},"modifiers",12,[[-6,"scale"],1,0],"data",11,[{"keys":1},"values",4,[0,1088,48,22,16]]],[{},"modifiers",12,[[-7,"position"],1,0],"data",11,[{"keys":2},"values",4,[0,1280,48,22,16]]],[{},"modifiers",12,[[-8,"rotation"],1,0],"data",11,[{"keys":2},"values",4,[0,1472,64,38,16]]],[{},"modifiers",12,[[-9,"scale"],1,0],"data",11,[{"keys":2},"values",4,[0,1728,48,22,16]]],[{},"modifiers",12,[[-10,"position"],1,0],"data",11,[{"keys":3},"values",4,[0,1920,48,22,16]]],[{},"modifiers",12,[[-11,"rotation"],1,0],"data",11,[{"keys":3},"values",4,[0,2112,64,38,16]]],[{},"modifiers",12,[[-12,"scale"],1,0],"data",11,[{"keys":3},"values",4,[0,2368,48,22,16]]],[{},"modifiers",12,[[-13,"position"],1,0],"data",11,[{"keys":4},"values",4,[0,2560,48,22,16]]],[{},"modifiers",12,[[-14,"rotation"],1,0],"data",11,[{"keys":4},"values",4,[0,2752,64,38,16]]],[{},"modifiers",12,[[-15,"scale"],1,0],"data",11,[{"keys":4},"values",4,[0,3008,48,22,16]]],[{},"modifiers",12,[[-16,"position"],1,0],"data",11,[{"keys":5},"values",4,[0,3200,48,22,16]]],[{},"modifiers",12,[[-17,"rotation"],1,0],"data",11,[{"keys":5},"values",4,[0,3392,64,38,16]]],[{},"modifiers",12,[[-18,"scale"],1,0],"data",11,[{"keys":5},"values",4,[0,3648,48,22,16]]],[{},"modifiers",12,[[-19,"position"],1,0],"data",11,[{"keys":6},"values",4,[0,3840,48,22,16]]],[{},"modifiers",12,[[-20,"rotation"],1,0],"data",11,[{"keys":6},"values",4,[0,4032,64,38,16]]],[{},"modifiers",12,[[-21,"scale"],1,0],"data",11,[{"keys":6},"values",4,[0,4288,48,22,16]]],[{},"modifiers",12,[[-22,"position"],1,0],"data",11,[{"keys":7},"values",4,[0,4480,48,22,16]]],[{},"modifiers",12,[[-23,"rotation"],1,0],"data",11,[{"keys":7},"values",4,[0,4672,64,38,16]]],[{},"modifiers",12,[[-24,"scale"],1,0],"data",11,[{"keys":7},"values",4,[0,4928,48,22,16]]],[{},"modifiers",12,[[-25,"position"],1,0],"data",11,[{"keys":8},"values",4,[0,5120,48,22,16]]],[{},"modifiers",12,[[-26,"rotation"],1,0],"data",11,[{"keys":8},"values",4,[0,5312,64,38,16]]],[{},"modifiers",12,[[-27,"scale"],1,0],"data",11,[{"keys":8},"values",4,[0,5568,48,22,16]]],[{},"modifiers",12,[[-28,"position"],1,0],"data",11,[{"keys":9},"values",4,[0,5760,48,22,16]]],[{},"modifiers",12,[[-29,"rotation"],1,0],"data",11,[{"keys":9},"values",4,[0,5952,64,38,16]]],[{},"modifiers",12,[[-30,"scale"],1,0],"data",11,[{"keys":9},"values",4,[0,6208,48,22,16]]],[{},"modifiers",12,[[-31,"position"],1,0],"data",11,[{"keys":10},"values",4,[0,6400,48,22,16]]],[{},"modifiers",12,[[-32,"rotation"],1,0],"data",11,[{"keys":10},"values",4,[0,6592,64,38,16]]],[{},"modifiers",12,[[-33,"scale"],1,0],"data",11,[{"keys":10},"values",4,[0,6848,48,22,16]]],[{},"modifiers",12,[[-34,"position"],1,0],"data",11,[{"keys":11},"values",4,[0,7040,48,22,16]]],[{},"modifiers",12,[[-35,"rotation"],1,0],"data",11,[{"keys":11},"values",4,[0,7232,64,38,16]]],[{},"modifiers",12,[[-36,"scale"],1,0],"data",11,[{"keys":11},"values",4,[0,7488,48,22,16]]],[{},"modifiers",12,[[-37,"position"],1,0],"data",11,[{"keys":12},"values",4,[0,7680,48,22,16]]],[{},"modifiers",12,[[-38,"rotation"],1,0],"data",11,[{"keys":12},"values",4,[0,7872,64,38,16]]],[{},"modifiers",12,[[-39,"scale"],1,0],"data",11,[{"keys":12},"values",4,[0,8128,48,22,16]]],[{},"modifiers",12,[[-40,"position"],1,0],"data",11,[{"keys":13},"values",4,[0,8320,48,22,16]]],[{},"modifiers",12,[[-41,"rotation"],1,0],"data",11,[{"keys":13},"values",4,[0,8512,64,38,16]]],[{},"modifiers",12,[[-42,"scale"],1,0],"data",11,[{"keys":13},"values",4,[0,8768,48,22,16]]],[{},"modifiers",12,[[-43,"position"],1,0],"data",11,[{"keys":14},"values",4,[0,8960,48,22,16]]],[{},"modifiers",12,[[-44,"rotation"],1,0],"data",11,[{"keys":14},"values",4,[0,9152,64,38,16]]],[{},"modifiers",12,[[-45,"scale"],1,0],"data",11,[{"keys":14},"values",4,[0,9408,48,22,16]]],[{},"modifiers",12,[[-46,"position"],1,0],"data",11,[{"keys":15},"values",4,[0,9600,48,22,16]]],[{},"modifiers",12,[[-47,"rotation"],1,0],"data",11,[{"keys":15},"values",4,[0,9792,64,38,16]]],[{},"modifiers",12,[[-48,"scale"],1,0],"data",11,[{"keys":15},"values",4,[0,10048,48,22,16]]],[{},"modifiers",12,[[-49,"position"],1,0],"data",11,[{"keys":16},"values",4,[0,10240,48,22,16]]],[{},"modifiers",12,[[-50,"rotation"],1,0],"data",11,[{"keys":16},"values",4,[0,10432,64,38,16]]],[{},"modifiers",12,[[-51,"scale"],1,0],"data",11,[{"keys":16},"values",4,[0,10688,48,22,16]]],[{},"modifiers",12,[[-52,"position"],1,0],"data",11,[{"keys":17},"values",4,[0,10880,48,22,16]]],[{},"modifiers",12,[[-53,"rotation"],1,0],"data",11,[{"keys":17},"values",4,[0,11072,64,38,16]]],[{},"modifiers",12,[[-54,"scale"],1,0],"data",11,[{"keys":17},"values",4,[0,11328,48,22,16]]],[{},"modifiers",12,[[-55,"position"],1,0],"data",11,[{"keys":18},"values",4,[0,11520,48,22,16]]],[{},"modifiers",12,[[-56,"rotation"],1,0],"data",11,[{"keys":18},"values",4,[0,11712,64,38,16]]],[{},"modifiers",12,[[-57,"scale"],1,0],"data",11,[{"keys":18},"values",4,[0,11968,48,22,16]]],[{},"modifiers",12,[[-58,"position"],1,0],"data",11,[{"keys":19},"values",4,[0,12160,48,22,16]]],[{},"modifiers",12,[[-59,"rotation"],1,0],"data",11,[{"keys":19},"values",4,[0,12352,64,38,16]]],[{},"modifiers",12,[[-60,"scale"],1,0],"data",11,[{"keys":19},"values",4,[0,12608,48,22,16]]],[{},"modifiers",12,[[-61,"position"],1,0],"data",11,[{"keys":20},"values",4,[0,12800,48,22,16]]],[{},"modifiers",12,[[-62,"rotation"],1,0],"data",11,[{"keys":20},"values",4,[0,12992,64,38,16]]],[{},"modifiers",12,[[-63,"scale"],1,0],"data",11,[{"keys":20},"values",4,[0,13248,48,22,16]]],[{},"modifiers",12,[[-64,"position"],1,0],"data",11,[{"keys":21},"values",4,[0,13440,45,22,15]]],[{},"modifiers",12,[[-65,"rotation"],1,0],"data",11,[{"keys":21},"values",4,[0,13620,60,38,15]]],[{},"modifiers",12,[[-66,"scale"],1,0],"data",11,[{"keys":21},"values",4,[0,13860,45,22,15]]],[{},"modifiers",12,[[-67,"position"],1,0],"data",11,[{"keys":22},"values",4,[0,14040,48,22,16]]],[{},"modifiers",12,[[-68,"rotation"],1,0],"data",11,[{"keys":22},"values",4,[0,14232,64,38,16]]],[{},"modifiers",12,[[-69,"scale"],1,0],"data",11,[{"keys":22},"values",4,[0,14488,48,22,16]]],[{},"modifiers",12,[[-70,"position"],1,0],"data",11,[{"keys":23},"values",4,[0,14680,48,22,16]]],[{},"modifiers",12,[[-71,"rotation"],1,0],"data",11,[{"keys":23},"values",4,[0,14872,64,38,16]]],[{},"modifiers",12,[[-72,"scale"],1,0],"data",11,[{"keys":23},"values",4,[0,15128,48,22,16]]],[{},"modifiers",12,[[-73,"position"],1,0],"data",11,[{"keys":24},"values",4,[0,15320,48,22,16]]],[{},"modifiers",12,[[-74,"rotation"],1,0],"data",11,[{"keys":24},"values",4,[0,15512,64,38,16]]],[{},"modifiers",12,[[-75,"scale"],1,0],"data",11,[{"keys":24},"values",4,[0,15768,48,22,16]]],[{},"modifiers",12,[[-76,"position"],1,0],"data",11,[{"keys":25},"values",4,[0,15960,48,22,16]]],[{},"modifiers",12,[[-77,"rotation"],1,0],"data",11,[{"keys":25},"values",4,[0,16152,64,38,16]]],[{},"modifiers",12,[[-78,"scale"],1,0],"data",11,[{"keys":25},"values",4,[0,16408,48,22,16]]],[{},"modifiers",12,[[-79,"position"],1,0],"data",11,[{"keys":26},"values",4,[0,16600,48,22,16]]],[{},"modifiers",12,[[-80,"rotation"],1,0],"data",11,[{"keys":26},"values",4,[0,16792,64,38,16]]],[{},"modifiers",12,[[-81,"scale"],1,0],"data",11,[{"keys":26},"values",4,[0,17048,48,22,16]]],[{},"modifiers",12,[[-82,"position"],1,0],"data",11,[{"keys":27},"values",4,[0,17240,48,22,16]]],[{},"modifiers",12,[[-83,"rotation"],1,0],"data",11,[{"keys":27},"values",4,[0,17432,64,38,16]]],[{},"modifiers",12,[[-84,"scale"],1,0],"data",11,[{"keys":27},"values",4,[0,17688,48,22,16]]],[{},"modifiers",12,[[-85,"position"],1,0],"data",11,[{"keys":28},"values",4,[0,17880,48,22,16]]],[{},"modifiers",12,[[-86,"rotation"],1,0],"data",11,[{"keys":28},"values",4,[0,18072,64,38,16]]],[{},"modifiers",12,[[-87,"scale"],1,0],"data",11,[{"keys":28},"values",4,[0,18328,48,22,16]]],[{},"modifiers",12,[[-88,"position"],1,0],"data",11,[{"keys":29},"values",4,[0,18520,48,22,16]]],[{},"modifiers",12,[[-89,"rotation"],1,0],"data",11,[{"keys":29},"values",4,[0,18712,64,38,16]]],[{},"modifiers",12,[[-90,"scale"],1,0],"data",11,[{"keys":29},"values",4,[0,18968,48,22,16]]],[{},"modifiers",12,[[-91,"position"],1,0],"data",11,[{"keys":30},"values",4,[0,19160,48,22,16]]],[{},"modifiers",12,[[-92,"rotation"],1,0],"data",11,[{"keys":30},"values",4,[0,19352,64,38,16]]],[{},"modifiers",12,[[-93,"scale"],1,0],"data",11,[{"keys":30},"values",4,[0,19608,48,22,16]]],[{},"modifiers",12,[[-94,"position"],1,0],"data",11,[{"keys":31},"values",4,[0,19800,48,22,16]]],[{},"modifiers",12,[[-95,"rotation"],1,0],"data",11,[{"keys":31},"values",4,[0,19992,64,38,16]]],[{},"modifiers",12,[[-96,"scale"],1,0],"data",11,[{"keys":31},"values",4,[0,20248,48,22,16]]],[{},"modifiers",12,[[-97,"position"],1,0],"data",11,[{"keys":32},"values",4,[0,20440,48,22,16]]],[{},"modifiers",12,[[-98,"rotation"],1,0],"data",11,[{"keys":32},"values",4,[0,20632,64,38,16]]],[{},"modifiers",12,[[-99,"scale"],1,0],"data",11,[{"keys":32},"values",4,[0,20888,48,22,16]]],[{},"modifiers",12,[[-100,"position"],1,0],"data",11,[{"keys":33},"values",4,[0,21080,48,22,16]]],[{},"modifiers",12,[[-101,"rotation"],1,0],"data",11,[{"keys":33},"values",4,[0,21272,64,38,16]]],[{},"modifiers",12,[[-102,"scale"],1,0],"data",11,[{"keys":33},"values",4,[0,21528,48,22,16]]],[{},"modifiers",12,[[-103,"position"],1,0],"data",11,[{"keys":34},"values",4,[0,21720,48,22,16]]],[{},"modifiers",12,[[-104,"rotation"],1,0],"data",11,[{"keys":34},"values",4,[0,21912,64,38,16]]],[{},"modifiers",12,[[-105,"scale"],1,0],"data",11,[{"keys":34},"values",4,[0,22168,48,22,16]]],[{},"modifiers",12,[[-106,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22360,3,22,1]]],[{},"modifiers",12,[[-107,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22372,3,22,1]]],[{},"modifiers",12,[[-108,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22384,4,38,1]]],[{},"modifiers",12,[[-109,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22400,3,22,1]]],[{},"modifiers",12,[[-110,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22412,3,22,1]]],[{},"modifiers",12,[[-111,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22424,4,38,1]]],[{},"modifiers",12,[[-112,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22440,3,22,1]]],[{},"modifiers",12,[[-113,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22452,3,22,1]]],[{},"modifiers",12,[[-114,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22464,4,38,1]]],[{},"modifiers",12,[[-115,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22480,3,22,1]]],[{},"modifiers",12,[[-116,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22492,3,22,1]]],[{},"modifiers",12,[[-117,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22504,4,38,1]]],[{},"modifiers",12,[[-118,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22520,3,22,1]]],[{},"modifiers",12,[[-119,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22532,3,22,1]]],[{},"modifiers",12,[[-120,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22544,4,38,1]]],[{},"modifiers",12,[[-121,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22560,3,22,1]]],[{},"modifiers",12,[[-122,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22572,3,22,1]]],[{},"modifiers",12,[[-123,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22584,4,38,1]]],[{},"modifiers",12,[[-124,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22600,3,22,1]]],[{},"modifiers",12,[[-125,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22612,3,22,1]]],[{},"modifiers",12,[[-126,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22624,4,38,1]]],[{},"modifiers",12,[[-127,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22640,3,22,1]]],[{},"modifiers",12,[[-128,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22652,3,22,1]]],[{},"modifiers",12,[[-129,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22664,4,38,1]]],[{},"modifiers",12,[[-130,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22680,3,22,1]]],[{},"modifiers",12,[[-131,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22692,3,22,1]]],[{},"modifiers",12,[[-132,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22704,4,38,1]]],[{},"modifiers",12,[[-133,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22720,3,22,1]]],[{},"modifiers",12,[[-134,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22732,3,22,1]]],[{},"modifiers",12,[[-135,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22744,4,38,1]]],[{},"modifiers",12,[[-136,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22760,3,22,1]]],[{},"modifiers",12,[[-137,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22772,3,22,1]]],[{},"modifiers",12,[[-138,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22784,4,38,1]]],[{},"modifiers",12,[[-139,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22800,3,22,1]]],[{},"modifiers",12,[[-140,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22812,3,22,1]]],[{},"modifiers",12,[[-141,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22824,4,38,1]]],[{},"modifiers",12,[[-142,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22840,3,22,1]]],[{},"modifiers",12,[[-143,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22852,3,22,1]]],[{},"modifiers",12,[[-144,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22864,4,38,1]]],[{},"modifiers",12,[[-145,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22880,3,22,1]]],[{},"modifiers",12,[[-146,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22892,3,22,1]]],[{},"modifiers",12,[[-147,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22904,4,38,1]]],[{},"modifiers",12,[[-148,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22920,3,22,1]]],[{},"modifiers",12,[[-149,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22932,3,22,1]]],[{},"modifiers",12,[[-150,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22944,4,38,1]]],[{},"modifiers",12,[[-151,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22960,3,22,1]]],[{},"modifiers",12,[[-152,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22972,3,22,1]]],[{},"modifiers",12,[[-153,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,22984,4,38,1]]],[{},"modifiers",12,[[-154,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,23000,3,22,1]]],[{},"modifiers",12,[[-155,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,23012,3,22,1]]],[{},"modifiers",12,[[-156,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,23024,4,38,1]]],[{},"modifiers",12,[[-157,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,23040,3,22,1]]],[{},"modifiers",12,[[-158,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,23052,3,22,1]]],[{},"modifiers",12,[[-159,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,23064,4,38,1]]],[{},"modifiers",12,[[-160,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,23080,3,22,1]]],[{},"modifiers",12,[[-161,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,23092,3,22,1]]],[{},"modifiers",12,[[-162,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,23104,4,38,1]]],[{},"modifiers",12,[[-163,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,23120,3,22,1]]],[{},"modifiers",12,[[-164,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,23132,3,22,1]]],[{},"modifiers",12,[[-165,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[0,23144,4,38,1]]]],11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]],[1,"Armature/Bone"],[1,"Armature/Bone/Bone.001.l"],[1,"Armature/Bone/Bone.001.l/Bone.002.l"],[1,"Armature/Bone/Bone.001.l/Bone.002.l/Bone.003.l"],[1,"Armature/Bone/Bone.001.r"],[1,"Armature/Bone/Bone.001.r/Bone.002.r"],[1,"Armature/Bone/Bone.001.r/Bone.002.r/Bone.003.r"],[1,"Armature.001/Bone"],[1,"Armature.001/Bone/Bone.001.l"],[1,"Armature.001/Bone/Bone.001.l/Bone.002.l"],[1,"Armature.001/Bone/Bone.001.l/Bone.002.l/Bone.003.l"],[1,"Armature.001/Bone/Bone.001.r"],[1,"Armature.001/Bone/Bone.001.r/Bone.002.r"],[1,"Armature.001/Bone/Bone.001.r/Bone.002.r/Bone.003.r"],[1,"Armature.002/Bone"],[1,"Armature.002/Bone/Bone.001.l"],[1,"Armature.002/Bone/Bone.001.l/Bone.002.l"],[1,"Armature.002/Bone/Bone.001.l/Bone.002.l/Bone.003.l"],[1,"Armature.002/Bone/Bone.001.r"],[1,"Armature.002/Bone/Bone.001.r/Bone.002.r"],[1,"Armature.002/Bone/Bone.001.r/Bone.002.r/Bone.003.r"],[1,"Armature.003/Bone"],[1,"Armature.003/Bone/Bone.001.l"],[1,"Armature.003/Bone/Bone.001.l/Bone.002.l"],[1,"Armature.003/Bone/Bone.001.l/Bone.002.l/Bone.003.l"],[1,"Armature.003/Bone/Bone.001.r"],[1,"Armature.003/Bone/Bone.001.r/Bone.002.r"],[1,"Armature.003/Bone/Bone.001.r/Bone.002.r/Bone.003.r"],[1,"Armature.004/Bone"],[1,"Armature.004/Bone/Bone.001.l"],[1,"Armature.004/Bone/Bone.001.l/Bone.002.l"],[1,"Armature.004/Bone/Bone.001.l/Bone.002.l/Bone.003.l"],[1,"Armature.004/Bone/Bone.001.r"],[1,"Armature.004/Bone/Bone.001.r/Bone.002.r"],[1,"Armature.004/Bone/Bone.001.r/Bone.002.r/Bone.003.r"],[1,"Plane"],[1,"Armature"],[1,"Armature/Bone/Bone.001.l/Bone.002.l/Bone.003.l/Bone.003.l_end"],[1,"Armature/Bone/Bone.001.r/Bone.002.r/Bone.003.r/Bone.003.r_end"],[1,"Plane.001"],[1,"Armature.001"],[1,"Armature.001/Bone/Bone.001.l/Bone.002.l/Bone.003.l/Bone.003.l_end"],[1,"Armature.001/Bone/Bone.001.r/Bone.002.r/Bone.003.r/Bone.003.r_end"],[1,"Plane.002"],[1,"Armature.002"],[1,"Armature.002/Bone/Bone.001.l/Bone.002.l/Bone.003.l/Bone.003.l_end"],[1,"Armature.002/Bone/Bone.001.r/Bone.002.r/Bone.003.r/Bone.003.r_end"],[1,"Plane.003"],[1,"Armature.003"],[1,"Armature.003/Bone/Bone.001.l/Bone.002.l/Bone.003.l/Bone.003.l_end"],[1,"Armature.003/Bone/Bone.001.r/Bone.002.r/Bone.003.r/Bone.003.r_end"],[1,"Plane.004"],[1,"Armature.004"],[1,"Armature.004/Bone/Bone.001.l/Bone.002.l/Bone.003.l/Bone.003.l_end"],[1,"Armature.004/Bone/Bone.001.r/Bone.002.r/Bone.003.r/Bone.003.r_end"]],0,[0,-1,1,0,-1,1,0,-1,1,0,-1,2,0,-1,2,0,-1,2,0,-1,3,0,-1,3,0,-1,3,0,-1,4,0,-1,4,0,-1,4,0,-1,5,0,-1,5,0,-1,5,0,-1,6,0,-1,6,0,-1,6,0,-1,7,0,-1,7,0,-1,7,0,-1,8,0,-1,8,0,-1,8,0,-1,9,0,-1,9,0,-1,9,0,-1,10,0,-1,10,0,-1,10,0,-1,11,0,-1,11,0,-1,11,0,-1,12,0,-1,12,0,-1,12,0,-1,13,0,-1,13,0,-1,13,0,-1,14,0,-1,14,0,-1,14,0,-1,15,0,-1,15,0,-1,15,0,-1,16,0,-1,16,0,-1,16,0,-1,17,0,-1,17,0,-1,17,0,-1,18,0,-1,18,0,-1,18,0,-1,19,0,-1,19,0,-1,19,0,-1,20,0,-1,20,0,-1,20,0,-1,21,0,-1,21,0,-1,21,0,-1,22,0,-1,22,0,-1,22,0,-1,23,0,-1,23,0,-1,23,0,-1,24,0,-1,24,0,-1,24,0,-1,25,0,-1,25,0,-1,25,0,-1,26,0,-1,26,0,-1,26,0,-1,27,0,-1,27,0,-1,27,0,-1,28,0,-1,28,0,-1,28,0,-1,29,0,-1,29,0,-1,29,0,-1,30,0,-1,30,0,-1,30,0,-1,31,0,-1,31,0,-1,31,0,-1,32,0,-1,32,0,-1,32,0,-1,33,0,-1,33,0,-1,33,0,-1,34,0,-1,34,0,-1,34,0,-1,35,0,-1,35,0,-1,35,0,-1,36,0,-1,36,0,-1,36,0,-1,37,0,-1,37,0,-1,37,0,-1,38,0,-1,38,0,-1,38,0,-1,39,0,-1,39,0,-1,39,0,-1,40,0,-1,40,0,-1,40,0,-1,41,0,-1,41,0,-1,41,0,-1,42,0,-1,42,0,-1,42,0,-1,43,0,-1,43,0,-1,43,0,-1,44,0,-1,44,0,-1,44,0,-1,45,0,-1,45,0,-1,45,0,-1,46,0,-1,46,0,-1,46,0,-1,47,0,-1,47,0,-1,47,0,-1,48,0,-1,48,0,-1,48,0,-1,49,0,-1,49,0,-1,49,0,-1,50,0,-1,50,0,-1,50,0,-1,51,0,-1,51,0,-1,51,0,-1,52,0,-1,52,0,-1,52,0,-1,53,0,-1,53,0,-1,53,0,-1,54,0,-1,54,0,-1,54,0,-1,55,0,-1,55,0,-1,55,165],[],[],[]],[[[5,".bin",27432,856793026,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":24192,"length":1872,"count":468,"stride":4}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[1],"indexView":{"offset":27360,"length":72,"count":18,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24192,"count":336,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":26064,"length":1296,"count":18,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6]]},"minPosition",8,[1,-0.012557893991470337,-0.01870827004313469,0.008078820072114468],"maxPosition",8,[1,0.011352612636983395,0.01870827004313469,0.012344586662948132]]]],0,0,[],[],[]],[[[7,"Skin-1",3975363760,["Armature.001/Bone","Armature.001/Bone/Bone.001.l","Armature.001/Bone/Bone.001.l/Bone.002.l","Armature.001/Bone/Bone.001.l/Bone.002.l/Bone.003.l","Armature.001/Bone/Bone.001.r","Armature.001/Bone/Bone.001.r/Bone.002.r","Armature.001/Bone/Bone.001.r/Bone.002.r/Bone.003.r"],[[[7,0.023691372945904732,0.9997193813323975,2.1321608301150263e-7,0,2.8650759986703633e-7,2.0648629117658857e-7,-1,0,-0.9997192621231079,0.02369137480854988,-2.815352502238966e-7,0,0.011094330810010433,0.00880201905965805,0.000013393993867794052,1],[7,0.11699221283197403,-0.0005413024919107556,-0.9931326508522034,0,0.11385837942361832,0.9934133291244507,0.012871199287474155,0,0.9865845441818237,-0.11458230018615723,0.11628330498933792,0,-0.012250255793333054,-0.0012746156426146626,-0.00006122120248619467,1],[7,0.1203233152627945,-0.2515428364276886,-0.9603376984596252,0,0.04586415737867355,0.9677411913871765,-0.24773575365543365,0,0.9916747212409973,-0.014236684888601303,0.12797865271568298,0,-0.011804877780377865,-0.0067226155661046505,0.0017074153292924166,1],[7,0.11491017043590546,-0.40787839889526367,-0.9057762026786804,0,0.05133351311087608,0.9130358099937439,-0.4046352803707123,0,0.9920485019683838,3.431776818274557e-8,0.1258549988269806,0,-0.011883239261806011,-0.012292428873479366,0.0038411838468164206,1],[7,-0.11699213087558746,-0.0005411400343291461,-0.9931328296661377,0,0.1138584092259407,-0.9934136867523193,-0.012871353887021542,0,-0.9865846037864685,-0.114582359790802,0.11628319323062897,0,0.012247207574546337,-0.0012480097357183695,-0.000060874408518429846,1],[7,-0.1203232929110527,-0.2515425384044647,-0.9603376984596252,0,0.04586414247751236,-0.9677415490150452,0.2477353811264038,0,-0.9916747212409973,-0.014236731454730034,0.1279786378145218,0,0.011803649365901947,-0.006696690805256367,0.0017007802380248904,1],[7,-0.11491020768880844,-0.4078783094882965,-0.9057765007019043,0,0.051333535462617874,-0.9130364656448364,0.40463510155677795,0,-0.9920485615730286,-7.003218005507961e-9,0.12585504353046417,0,0.011881866492331028,-0.01226797979325056,0.003830339526757598,1]],8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[8,"grassBack"],[18,"grassBack",[-2],[3,"574PI+oI5BUp4D9m/9vb+a",-1,0],[1,-0.2,0,2.083],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[19,"Node",1,[[11,true,[null],-3,[2,"5cDjhN3ZBJuaTtqedoVicx"],[6],0]],[3,"3eV2yzK9ZCNJMqlgTWn4EX",1,0],[1,1,1.1619433198380567,1]]],0,[0,3,1,0,-1,2,0,0,2,0,4,1,3],[0],[6],[6]],[[[5,".bin",86264,1984533023,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":73976,"length":12288,"count":6144,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":73976,"count":1321,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-1,-0.5],"maxPosition",8,[1,0.5,1,0.5]]]],0,0,[],[],[]],[[[5,".bin",236,3297164954,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,0],"maxPosition",8,[1,0.5,0.5,0]]]],0,0,[],[],[]],[[[8,"box-pre"],[20,"box-pre",[[33,-2,[2,"b90eTgRyJEZLFWJ3Dvj25U"]]],[3,"bdI0woxulCDplYqPnloHtG",-1,0],[1,-0.005,0.162,0],[1,0.672,0.308,1]]],0,[0,3,1,0,0,1,0,4,1,2],[],[],[]],[[{"name":"default_btn_normal","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"texture":"20835ba4-6145-4fbc-a58a-051ce700aa3e@6c48a","packable":true}],[2],0,[0],[7],[7]],[[[9,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{},"mainColor",8,[4,1929379962]],{},{}],11,0,0]]],0,0,[0],[2],[0]],[[{"name":"back","rect":{"x":0,"y":0,"width":138,"height":118},"offset":{"x":0,"y":0},"originalSize":{"width":138,"height":118},"rotated":false,"capInsets":[0,0,0,0],"texture":"2f58909a-8585-4987-a60d-3a46d5a51957@6c48a","packable":true}],[2],0,[0],[7],[8]],[[[9,"1",[{"rasterizerState":{"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true,"USE_SEQUENCE_ANIM":true}],[[[{},"seqAnimParams",8,[2,5.4,19,0,0],"mainTexture",6,0]],11]]],0,0,[0,0],[8,2],[2,3]],[[[9,"1",[{"rasterizerState":{"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true,"USE_SEQUENCE_ANIM":true}],[[[{},"seqAnimParams",8,[2,3.6,18,0,0],"mainTexture",6,0]],11]]],0,0,[0,0],[8,2],[1,3]],[[[34,"../scripts/sequence-animation",[{"hash":451228011,"name":"../scripts/sequence-animation|unlit-vs:vert|unlit-fs:frag","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 13) in lowp vec4 a_color;\n  layout(location = 0) out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  layout(location = 1) out vec2 v_uv;\n  layout(set = 1, binding = 0) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n  layout(set = 1, binding = 1) uniform SeqAnimConstants {\n    vec4 seqAnimParams;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  #if USE_TEXTURE\n    v_uv = a_texCoord;\n    #if FLIP_UV\n      v_uv.y = 1.0 - v_uv.y;\n    #endif\n    v_uv = v_uv * tilingOffset.xy + tilingOffset.zw;\n    #if USE_SEQUENCE_ANIM\n      float seqAnimCurFrame = 0.0;\n      if (seqAnimParams.z > 1.1) {\n        seqAnimCurFrame = seqAnimParams.w != 0.0 ? fract(cc_time.x / seqAnimParams.w) : 0.0;\n      } else if (seqAnimParams.z > 0.1) {\n        seqAnimCurFrame = clamp(seqAnimParams.w, 0.0, 0.999);\n      } else {\n        seqAnimCurFrame = fract(seqAnimParams.w);\n      }\n      seqAnimCurFrame *= seqAnimParams.y;\n      vec2 size = vec2(floor(seqAnimParams.x), fract(seqAnimParams.x) * 10.0);\n      vec2 seqAnimOffset = floor(vec2(mod(seqAnimCurFrame, size.x), seqAnimCurFrame / size.x));\n      v_uv = (v_uv + seqAnimOffset) / size;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  layout(location = 1) in vec2 v_uv;\n  layout(set = 1, binding = 3) uniform sampler2D mainTexture;\n#endif\nlayout(set = 1, binding = 2) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  layout(location = 0) in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o *= v_color;\n  #endif\n  #if USE_TEXTURE\n    o *= texture(mainTexture, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\n#if USE_VERTEX_COLOR\n  in lowp vec4 a_color;\n  out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  out vec2 v_uv;\n  layout(std140) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n  layout(std140) uniform SeqAnimConstants {\n    vec4 seqAnimParams;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  #if USE_TEXTURE\n    v_uv = a_texCoord;\n    #if FLIP_UV\n      v_uv.y = 1.0 - v_uv.y;\n    #endif\n    v_uv = v_uv * tilingOffset.xy + tilingOffset.zw;\n    #if USE_SEQUENCE_ANIM\n      float seqAnimCurFrame = 0.0;\n      if (seqAnimParams.z > 1.1) {\n        seqAnimCurFrame = seqAnimParams.w != 0.0 ? fract(cc_time.x / seqAnimParams.w) : 0.0;\n      } else if (seqAnimParams.z > 0.1) {\n        seqAnimCurFrame = clamp(seqAnimParams.w, 0.0, 0.999);\n      } else {\n        seqAnimCurFrame = fract(seqAnimParams.w);\n      }\n      seqAnimCurFrame *= seqAnimParams.y;\n      vec2 size = vec2(floor(seqAnimParams.x), fract(seqAnimParams.x) * 10.0);\n      vec2 seqAnimOffset = floor(vec2(mod(seqAnimCurFrame, size.x), seqAnimCurFrame / size.x));\n      v_uv = (v_uv + seqAnimOffset) / size;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o *= v_color;\n  #endif\n  #if USE_TEXTURE\n    o *= texture(mainTexture, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp vec4 cc_time;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n#endif\n#if USE_VERTEX_COLOR\n  attribute lowp vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n      uniform vec4 tilingOffset;\n       uniform vec4 seqAnimParams;\n#endif\nvec4 vert () {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  #if USE_TEXTURE\n    v_uv = a_texCoord;\n    #if FLIP_UV\n      v_uv.y = 1.0 - v_uv.y;\n    #endif\n    v_uv = v_uv * tilingOffset.xy + tilingOffset.zw;\n    #if USE_SEQUENCE_ANIM\n      float seqAnimCurFrame = 0.0;\n      if (seqAnimParams.z > 1.1) {\n        seqAnimCurFrame = seqAnimParams.w != 0.0 ? fract(cc_time.x / seqAnimParams.w) : 0.0;\n      } else if (seqAnimParams.z > 0.1) {\n        seqAnimCurFrame = clamp(seqAnimParams.w, 0.0, 0.999);\n      } else {\n        seqAnimCurFrame = fract(seqAnimParams.w);\n      }\n      seqAnimCurFrame *= seqAnimParams.y;\n      vec2 size = vec2(floor(seqAnimParams.x), fract(seqAnimParams.x) * 10.0);\n      vec2 seqAnimOffset = floor(vec2(mod(seqAnimCurFrame, size.x), seqAnimCurFrame / size.x));\n      v_uv = (v_uv + seqAnimOffset) / size;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n   uniform vec4 mainColor;\n   uniform vec4 colorScaleAndCutoff;\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o *= v_color;\n  #endif\n  #if USE_TEXTURE\n    o *= texture2D(mainTexture, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":196,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"FLIP_UV","type":"boolean","defines":["USE_TEXTURE"]},{"name":"USE_SEQUENCE_ANIM","type":"boolean","defines":["USE_TEXTURE"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]}],"blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"SeqAnimConstants","stageFlags":1,"binding":1,"members":[{"name":"seqAnimParams","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"Constant","stageFlags":16,"binding":2,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_TEXTURE"]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":"u32vec4","count":1,"stageFlags":1,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":13,"defines":["USE_VERTEX_COLOR"]}],"varyings":[{"name":"v_color","type":16,"count":1,"stageFlags":1,"location":0,"defines":["USE_VERTEX_COLOR"]},{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":1,"defines":["USE_TEXTURE"]}]}],[{"name":"opaque","passes":[{"program":"../scripts/sequence-animation|unlit-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"seqAnimParams":{"type":16,"value":[4.1,4,0,0]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}}}]},{"name":"transparent","passes":[{"program":"../scripts/sequence-animation|unlit-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"seqAnimParams":{"type":16,"value":[4.1,4,0,0]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}}}]},{"name":"add","passes":[{"program":"../scripts/sequence-animation|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"seqAnimParams":{"type":16,"value":[4.1,4,0,0]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}}}]},{"name":"alpha-blend","passes":[{"program":"../scripts/sequence-animation|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"seqAnimParams":{"type":16,"value":[4.1,4,0,0]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}}}]}]]],0,0,[],[],[]],[[[35,"Soundtrack (OST)",".mp3",411.271837]],0,0,[],[],[]],[[[31,"Boids",2,90,3191724210,[[0,90]],[[[{"modifiers":["position"]},"data",11,[{"keys":0,"easingMethods":{}},"values",12,[[[1,0,10,0],[1,0,10,-100]],8,8]]]],11]]],0,0,[],[],[]],[[[9,1,[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{}],[[[{},"mainColor",8,[4,3372220415]]],11]]],0,0,[0],[2],[0]],[[[8,"Character"],[27,"Character",[-12,-13,-14,-15,-16,-17],[[[36,2,false,-2,[2,"f8qZbEnYtLCKBalNTiNc9y"],[1,0,1,1],[1,0,0,0]],[37,0.3,1.5,-3,[2,"7acBowHMhBPaFSFLUm2n3J"],[1,0,0.1,0]],-4,-5,[38,-10,[2,"50ulNdYbRDiIxswsbRUFKf"],-9,-8,[13,-7,[[4,5],[4,6],[4,7],[4,8],[4,9],[4,10]]],[13,-6,[[4,11],[4,12],[4,13]]]],[39,false,-11,[2,"d30lcz4/1JTYkuxw8UHfHC"]]],4,4,1,1,4,4],[3,"49+CJ2aY1Byqan68eYf5bv",-1,0],[1,0.5,4.857,2.157]],[21,"Target",1,[3,"50EEc9uGBKu6fOaGExxeky",1,0]],[22,"Camera",false,1,[[40,"Camera<CameraComponent>",100,6,1822425087,-18,[2,"dbCiGR9T1E0oZwxclTRFEj"],[4,4286073907]],[43,6,-19,[2,"e8k41bTtxGtL21y9wYOf9D"]]],[3,"930CCQMXpIxq6hdI/SCuwM",1,0],[1,7,1.542,0.369],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[23,"DebugCamera",false,1,[-20,-21],[3,"ebh+mNBnNIjpv9fxja0IQv",1,0],[1,0,-1.149,0]],[24,"Model",1,[-22,-23],[3,"f5JzQO9LZLNoLG54mVS7A0",1,0],[1,1,2,2]],[44,1,[2,"7eDq+eRu1HALg5DO5jXiyi"],[45,18]],[25,"Capsule",false,1,[[46,"Capsule<ModelComponent>",-24,[2,"79dw5Ftk1ApLmqTwrc+k7C"],[0],[6],1]],[3,"3aYu/w46VOrKIKoMOizkqS",1,0],[1,0.6,0.888,0.6]],[10,"Camera-001",4,[[41,"Camera<CameraComponent>",1822425087,-25,[2,"dbCiGR9T1E0oZwxclTRFEj"],[4,4286073907],[6,0,0,0.5,1]]],[3,"bdjGTxEzdLcrPMAxpHSRqH",1,0],[1,0,2.441,-4.654],[3,-5.336750069161487e-18,0.9961946980917455,0.08715574274765818,6.099933241728101e-17],[1,-10.000000000000002,180,0]],[10,"Camera",4,[[42,"Camera<CameraComponent>",0,6,1822425087,-26,[2,"dbCiGR9T1E0oZwxclTRFEj"],[4,4286073907]]],[3,"24w4RWgm5KD5aUlfwy4Qi+",1,0],[1,-4,0,0],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,0,-90,0]],[28,"Character",5,[-27],[3,"93x3u5Ij5HXq5p3t4UQw9M",1,0],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,-1,1.777,1],[1,0,-89.99999999999999,0]],[14,"Quad<ModelComponent>",10,[2,"cf0e2Ddb1LaZRmljaFideC"],[2],[6]],[29,"Plane",5,[-28],[3,"dbMyvhATFEnKsA93GvDDni",1,0],[1,0,2.119,0.679],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,-2.836,3.196,2.836],[1,0,-89.99999999999999,0]],[14,"Quad<ModelComponent>",12,[2,"95dxJDBY9E1I3ovdi3+d1B"],[3],[6]],[26,"audio",1,[[47,true,-29,[2,"35LsBU3ZhBwJWxnk94xDSd"],4]],[3,"bcG8kBNzVC7b7cA0n1miQw",1,0]],[48,0.4,true,1,1,[2,"98qV0ZNKdGx7pzWB4wrBQt"],6,2,2]],0,[0,3,1,0,0,1,0,0,1,0,-3,6,0,-4,15,0,9,13,0,9,11,0,10,15,0,11,6,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,7,0,-4,4,0,-5,5,0,-6,14,0,0,3,0,0,3,0,-1,8,0,-2,9,0,-1,10,0,-2,12,0,0,7,0,0,8,0,0,9,0,-1,11,0,-1,13,0,0,14,0,4,1,29],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,13],[-1,5,-1,-1,12,1,1,1,1,1,1,1,1,1,5,5],[9,10,11,12,13,14,15,16,17,18,2,1,1,1,4,4]]]]
